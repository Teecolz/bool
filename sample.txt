// arithmetic
a + b
a - b
a * b
a / b
a % b
a ** b --exponentiation
a // b --bth root of a


// booleans
tru
fal

// boolean expressions (rel ops)
!a
a > b
a < b
a >= b
a <= b
a == b
a != b


// object
a :=
    property:
        expression
    property:
        expression

{
    property:
        expression
    property:
        expression
}

a.property = expression

a has property
a not has property

// variable declaration
varname --declare variable
type:varname --declare variable of type
type:varname = expression

//conditionals
if condition:
    block

if condition:
    block
elif:
    block
el:
    block

// arrays
var.push asdf --appends asdf to array
var.pop --removes final element of array
var.has x --checks if array has element x
var.find x --index of x in var
var.rm x --removes first instance of x in var
var.rmAll x --removes all instances of x in var
var.ins x idx --inserts x at index idx in var
var.sub lo hi --returns subarray from lo to hi (exclusive)

// functions
fun x (a b):
    block --declares function x
fun x (a b):
    ret b --returns y

(a b): // anonymous literal
    block

//loop construction
for var in list:
    block

while bondition:
    block

do:
    block
until bondition

// pattern matching
fun x (param):
    match param with:
    | y :: expr
    | z :: expr

// classes(extensible)

class Person:
    _nameFirst
    _nameLast
    _age
    _occupation

    maker (_nameFirst _nameLast _age): --sets parameters to field values
        ret

class PoliceMan isA Person:
    _nameFirst
    _nameLast
    _age

    maker (_nameFirst _nameLast _age):
        _occupation = "twelvy"
        ret

// class instantiation

p = new Person ()

// still need lists, comments, class instantiation
