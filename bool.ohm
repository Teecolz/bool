Bool {
    Program = Block

    Stmt =
      ClassDecl     -- classdecl
      | FunDecl     -- fundecl
      | ObjDecl     -- objdecl
      | VarDecl     -- vardecl
      | Conditional -- conditional
      | Loop        -- loop
      | Exp         -- exp
      | Return      -- ret

    ClassDecl
        = "class" id ("isa" id)? ":" ClassSuite

    ClassSuite
        = newline indent ClassBody dedent

    ClassBody
        = (fieldDecl newline)* (MethodDecl newline)+

    fielddecl
      = "_" id

    MethodDecl
        = id params ":" Suite

    ObjDecl
        = id ":=" newline indent PropertyDecl* dedent

    // may need to expand this
    PropertyDecl
      = id ":" Exp newline

    FunDecl
        = "fun" id params ":" Suite

    VarDecl
        = id "=" Exp

    Return = "ret" Exp

    Funcall
        = id params

    Block
        = (Stmt newline)*

    params
        = "(" (id (" " id)*)? ")"

    /*
    Conditional
        = "if" Exp ":" newline
          indent
              Block
          dedent
          ("elif" Exp newline indent Block dedent)*
          ("el" Exp newline indent Block dedent)?
    */
    Conditional
      = "if" Case ("elif" Case)* ("el" ":" Suite)?

    Case
      = Exp ":" Suite

    Suite
      = newline indent (Stmt newline)+ dedent

    SimpleSuite
      = newline indent Exp newline dedent

    Loop
        = "for" id "in" (id | Listlit | Range) ":" Suite      --forIn
        | "while" Exp ":" Suite                               --while
        | "do" ":" Suite "until:" SimpleSuite                 --doUntil

    Exp
      = Exp1 ("or" Exp1)*
    Exp1
      = Exp2 ("and" Exp2)*
    Exp2
      = Exp3 relop Exp3      --binexp
      | Exp3
    Exp3
      = Exp4 (addop Exp4)*   --binexp
    Exp4
      = Exp5 (mulop Exp5)*   --binexp
    Exp5
      = Exp6 (expop Exp6)?   --expExp
    Exp6
      = prefixop? Exp7       --prefixOp
    exp7
      = Exp8 "[" Exp8 "]"    --listAccess
      | Exp8 "." Exp8        --access
      | Exp8
    Exp8
      = id
      | boollit
      | numlit
      | stringlit
      | Funlit
      | Objlit
      | Funcall
      | Classinst
      | Listlit
      | "(" Exp ")" --parens

    numlit = intlit | floatlit

    addop = "+" | "-"
    mulop = "*" | "/" | "%"
    prefixop = "!" | "-"
    expop = "**" | "//"
    relop = ">" | "<" | ">=" | "<=" | "!=" | "=="

    Explist = Exp ("," Exp)*
    Listlit = "[" Explist? "]"

    // will need to work on range ast
    Range = "range(" RangeExp ")"
    RangeExp = intlit ("," intlit("," "-"? intlit)?)?
    boollit = "tru" | "fal"
    intlit = digit+
    floatlit = digit+ "." (digit+)? | (digit+)? "." digit+
    stringlit = "\"" char* "\"" | "\'" char* "\'"
    Classinst = "new" Funcall

    Objlit = "{" newline indent PropertyDecl* dedent "}"

    Funlit = params ":" Suite

    reserved
         = "tru" | "fal" | "fun" | "if" | "elif" | "el" | "for" | "do"
         | "while" | "until" | "class" | "isa" | "in" | "new" | "#" | "ret"
         | "indent" | "dedent"

    char
         = alnum | punctuation | escape | stringSpace

    stringSpace
         = " " | "\\t" | "\\n"

    punctuation
         = "." | "," | "/" | "<" | ">" | "?" | ":" | ";" | "{" | "}" | "["
         | "]" | "|" | "+" | "=" | "-" | "_" | "(" | ")" | "!" | "@" | "#"
         | "$" | "%" | "^" | "&" | "*"

    escape = "\\" // still need to fully define these

    comment =  "#" (~"#" ~"\n" any)* "\n"                              --sl
            |  "##" (~"#" any)* "##"                                   --ml
    indent = "indent" // placeholder
    dedent = "dedent" // placeholder
    id = ~("_"? reserved) "_"? alnum+
    space := " " | "\t" | comment
    newline = "\n" | "\r" | "\u2028" | "\u2029"
}
