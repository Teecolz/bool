Bool {
    Program = Stmt+

    Stmt = ClassDecl | FunDecl | ObjDecl | VarDecl | Conditional | Loop | Exp | Return

    ClassDecl
        = "class" id ("isA" id)? ":" newline
            indent
                ("_" id )*
                (FunDecl newline)+
            dedent
    ObjDecl
        = id ":=" newline
          indent
              (id ":" newline indent Exp newline dedent)*
          dedent

    FunDecl
        = "fun" id params ":" newline
          indent
              Block
          dedent

    VarDecl
        = id "=" Exp

    Return = "ret" Exp
    funcall
        = id params

    Block
        = (Stmt newline)*

    params
        = "(" (id (" " id)*)? ")"

    Conditional
        = "if" Exp ":" newline
          indent
              Block
          dedent
          ("elif" Exp newline indent Block dedent)*
          ("el" Exp newline indent Block dedent)?

    Loop
        = "fer" id "in" (id | List | range) ":" newline indent Block dedent    --forIn
        | "while" Exp ":" newline indent Block dedent         --while
        | "do:" newline indent Block dedent newline "until:" newline indent Exp dedent--doUntil

    Exp
        = Exp1 ("or" Exp1)*
    Exp1
        = Exp2 ("and" Exp2)*
    Exp2
        = Exp3 (relop Exp3)*
    Exp3
        = Exp4 (addop Exp4)* --binExp
    Exp4
        = Exp5 (mulop Exp5)* --binExp
    Exp5
        = Exp6 (expop Exp6)? --expExp
    Exp6
        = prefixop? Exp7 --prefixOp
    Exp7
        = Exp8 ("[" Exp3 "]")? --listAccess
        | Exp8 ("." Exp8)? --access
    Exp8
        = id
        | boollit
        | Number
        | stringlit
        | Funlit
        | Objlit
        | funcall
        | classinst
        | "(" Exp ")" --parens


    Number = intlit | floatlit

    addop = "+" | "-"
    mulop = "*" | "/" | "%"
    prefixop = "!" | "-"
    expop = "**" | "//"
    relop = ">" | "<" | ">=" | "<=" | "!=" | "=="

    Explist = Exp ("," Exp)*
    List = "[" Explist? "]"
    range = "range(" intlit ("," intlit("," "-"? intlit)?)? ")"

    boollit = "tru" | "fal"
    intlit = digit+
    floatlit = digit+ "." (digit+)? | (digit+)? "." digit+
    stringlit = "\"" char* "\"" | "\'" char* "\'"
    classinst = "new" funcall

    Objlit =
            "{" newline
             indent
                (id ":" newline indent Exp newline dedent)*
             dedent
             "}"

    Funlit = params ":" newline
             indent
                Block
             dedent

    reserved = "tru" | "fal" | "fun" | "if" | "elif" | "el" | "for" | "do"
             | "while" | "until" | "class" | "isA" | "in" | "new" | "#" | "ret"
             | "indent" | "dedent"

    // placeholder until we fully define characters
    char = alnum
    comment =  "#" (~"\n" any)* "\n"
    indent = "indent" // placeholder
    dedent = "dedent" // placeholder
    id = ~reserved alnum+
    space := " " | "\t" | comment
    newline = "\n" | "\r" | "\u2028" | "\u2029"
}
