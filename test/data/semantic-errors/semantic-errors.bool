let lilList:[int]
lilList = [1, 2, 3]
let bigList:[int] = [1, 2, 3, 4, 5]
let flList:[int] = [1.2, 1.4]
let floatList:[float] = [2.3]

let x:int = 3
let x:int = 4
let a = 3.2
x + 3
1 + 2
x * x
x ** x
1.3 + 2.2
x // 3.4
1 % 3
3.4 % 2
1 - 2
x - x

if x == 3:
  1

if x:
  1

fun x (a:int b:int):
  a + b

fun x (a:int b:int):
  ret a + b

fun y (a:int b:int):
  ret a + b

fun xx:int (a:int b:int):
  ret a + b

fun yy (a b):
  ret a + b

fun z ():
  ret 1

fun zz:int ():
  ret "hello"

x(1 2)

a = z()
a = z(1)
a = z()()
a = 'hi'

while (a):
  ret a

do:
  a = a + 1
while tru

do:
  a = a + 1
until a

testObj :=
  a : 1
  b : 'hello, world'


let testObj2 = {
  a : 1
  b : 'hello, world'
}

testObj.a
testObj[a]
lilList[0]
lilList['hi']

let listComprehension:[int] = [x + 3 for x in lilList if x > 0]
let listComprehension2:[string] = ["" + x for x in lilList if x > 0]
let listComprehension3:[string] = ["" + x for x in lilList if x]
let listComprehension4:[string] = [x for x in lilList if x > 0]
